import requests
import telebot
import time
import schedule
from threading import Thread
from configuration import BOT_TOKEN
from db_home.models import User, Task
from db_home.models import db
from admin_app import app



bot = telebot.TeleBot(BOT_TOKEN)




def send_msg():
    """–ú–µ—Ç–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Å—Å—ã–ª–æ–∫"""
    text = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ó–∞–ø–æ–ª–Ω–∏ –æ—Ç—á–µ—Ç!\n–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://t.me/ScrumStandUp_Bot"
    token = BOT_TOKEN
    chat_id = "-1001799419976"  # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
    url_req = "https://api.telegram.org/bot" + token + "/sendMessage" + "?chat_id=" + chat_id + "&text=" + text 
    results = requests.get(url_req)
    print(results.json())


@bot.message_handler(commands=['start'])
def start(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–∞–≤–∞–π –ø–æ–±–æ–ª—Ç–∞–µ–º, –≤–≤–µ–¥–∏ —Å–≤–æ–π Username!')


@bot.message_handler(commands=['info'])
def get_info(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á"""
    with app.app_context():
        a = db.session.query(Task).filter(Task.tg_id == message.from_user.id).order_by(Task.id.desc()).limit(5).all()
        try:
            for i in a:
               bot.send_message(message.chat.id, f'–í—á–µ—Ä–∞—à–Ω–∏–π —Ç–∞—Å–∫: {i.yesterday_task}\n–°–µ–≥–æ–¥–Ω–µ—à–Ω–∏–π —Ç–∞—Å–∫: {i.today_task}\n–î–∞—Ç–∞: {i.date}')
        except IndexError:
            bot.send_message(message.chat.id,'–î—Ä—É–≥ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑!')


@bot.message_handler(commands=['friends_task'])
def friends_task(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–∑ –∑–∞–¥–∞—á —É –∫–æ–ª–µ–≥"""
    with app.app_context():
        try:
            username = db.session.query(User.tg_username, User.id).all()
            for i in username:
                if i.tg_username == message.from_user.username:
                    continue
                tasks = db.session.query(Task.yesterday_task, Task.today_task, Task.problem, Task.user_id).filter(Task.user_id ==i.id)[-1]
                bot.send_message(message.chat.id, f'Username: {i.tg_username}\n–í—á–µ—Ä–∞—à–Ω–∏–π —Ç–∞—Å–∫: {tasks.yesterday_task}\n–°–µ–≥–æ–¥–Ω–µ—à–Ω–∏–π —Ç–∞—Å–∫: {tasks.today_task}\n–ü—Ä–æ–±–ª–µ–º—ã:{tasks.problem}')
        except Exception:
            bot.register_next_step_handler('–î—Ä—É–≥ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑!', friends_task)



@bot.message_handler(content_types=['text'])
def cheak_yourself(message):
    """–ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with app.app_context():
        tg_name = db.session.query(User.tg_username).filter(User.tg_username == message.from_user.username).first()
        user_id = db.session.query(User.id).filter(User.tg_username == message.from_user.username).first()
        tg_id = message.from_user.id
        if message.text == tg_name['tg_username']:
            bot.send_message(message.chat.id, '–û–∫–µ–π –∫—Ä–∞—Å–∞–≤—á–∏–∫!')
            bot.send_message(message.chat.id, '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ç—ã –¥–µ–ª–∞–ª –≤—á–µ—Ä–∞?')
            task = Task()
            task.user_id = user_id['id']
            task.tg_id = tg_id
            db.session.add(task)
            db.session.commit()
            db.session.flush()
            bot.register_next_step_handler(message, first_question, task_id=task.id)
        else:
            bot.send_message(message.chat.id, '–ù–µ –ø—Ä–æ—à–µ–ª –í–∞—Å–µ–∫!')

##### –í–µ—Ç–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #####

def first_question(message, **kwargs):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        print(kwargs)
        print(message.text)
        try:
            task_id = kwargs.get('task_id', None)
            if task_id and task_id is not None:
                first_answer = message.text
                a = db.session.query(Task).filter(Task.id == task_id).first()
                a.yesterday_task = first_answer
                db.session.add(a)
                db.session.commit()
            bot.send_message(message.chat.id, '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?')
            bot.register_next_step_handler(message, second_question, task_id=a.id)
        except Exception:
            bot.register_next_step_handler('–î—Ä—É–≥ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ç—ã –¥–µ–ª–∞–ª –≤—á–µ—Ä–∞?', first_question, task_id=a.id)


def second_question(message, **kwargs):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å."""
    with app.app_context():
        print(kwargs)
        print(message.text)
        try:
            task_id = kwargs.get('task_id', None)
            if task_id and task_id is not None:
                second_answer = message.text
                a = db.session.query(Task).filter(Task.id == task_id).first()
                a.today_task = second_answer
                db.session.add(a)
                db.session.commit()
            bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?')
            bot.register_next_step_handler(message, problems, task_id=a.id)
        except Exception:
            bot.register_next_step_handler('–î—Ä—É–≥ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ç—ã –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?', second_question, task_id=a.id)


def problems(message, **kwargs):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å."""
    with app.app_context():
        print(kwargs)
        print(message.text)
        try:
            task_id = kwargs.get('task_id', None)
            if task_id and task_id is not None:
                problem = message.text
                a = db.session.query(Task).filter(Task.id == task_id).first()
                a.problem = problem
                db.session.add(a)
                db.session.commit()
            bot.send_message(message.chat.id, '–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! –î–æ –∑–∞–≤—Ç—Ä–∞ üññüèΩ')
        except Exception:
            bot.register_next_step_handler('–î—Ä—É–≥ —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑! –ö–∞–∫–∏–µ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?', problems, task_id=a.id)



def do_schedule():
    """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á"""
    # schedule.every(10).seconds.do(send_msg)
    schedule.every().day.at("10:00").do(send_msg)

    while True:
        schedule.run_pending()
        time.sleep(1)


def main_loop():
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏. –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –í—Ç–æ—Ä–æ–π –ø–æ—Ç–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
    thread = Thread(target=do_schedule)
    thread.start()

    bot.polling(True)


if __name__ == '__main__':
    main_loop()



